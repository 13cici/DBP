create or replace NONEDITIONABLE PACKAGE BODY SPREMI AS
e_iznimka exception;
--save_klijenti
-----------------------------------------------------------------------------------------
  procedure p_save_klijenti(in_json in JSON_OBJECT_T, out_json out JSON_OBJECT_T) AS
      l_obj JSON_OBJECT_T;
      l_klijenti klijenti%rowtype;
      l_count number;
      l_id number;
      l_string varchar2(1000);
      l_search varchar2(100);
      l_page number; 
      l_perpage number;
      l_action varchar2(10);
  begin

     l_obj := JSON_OBJECT_T(in_json);  
     l_string := in_json.TO_STRING;

     SELECT
        JSON_VALUE(l_string, '$.ID' ),
        JSON_VALUE(l_string, '$.IME'),
        JSON_VALUE(l_string, '$.PREZIME' ),
        JSON_VALUE(l_string, '$.EMAIL' ),
        JSON_VALUE(l_string, '$.OIB' ),
        JSON_VALUE(l_string, '$.OVLASTI' ),
        JSON_VALUE(l_string, '$.SPOL' ),
        JSON_VALUE(l_string, '$.ZAPORKA' ),
        JSON_VALUE(l_string, '$.ACTION' )
    INTO
        l_klijenti.ID,
        l_klijenti.IME,
        l_klijenti.PREZIME,
        l_klijenti.EMAIL,
        l_klijenti.OIB,
        l_klijenti.OVLASTI,
        l_klijenti.SPOL,
        l_klijenti.PASSWORD,
        l_action
    FROM 
       dual; 

    --FE kontrole
    if (nvl(l_action, ' ') = ' ') then
        if (filter.f_check_klijenti(l_obj, out_json)) then
           raise e_iznimka; 
        end if;  
    end if;

    if (l_klijenti.ID is null) then
        begin
           insert into klijenti (IME, PREZIME, EMAIL, OIB, OVLASTI, SPOL, PASSWORD) values
             (l_klijenti.IME, l_klijenti.PREZIME,
              l_klijenti.EMAIL, l_klijenti.OIB, l_klijenti.OVLASTI,
              l_klijenti.SPOL, l_klijenti.PASSWORD);
           commit;

           l_obj.put('h_message', 'Uspješno ste unijeli klijenta'); 
           l_obj.put('h_errcode', 0);
           out_json := l_obj;

        exception
           when others then 
               --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
               rollback;
               raise;
        end;
    else
       if (nvl(l_action, ' ') = 'delete') then
           begin
               delete klijenti where ID = l_klijenti.ID;
               commit;    

               l_obj.put('h_message', 'Uspješno ste obrisali klijenta'); 
               l_obj.put('h_errcode', 0);
               out_json := l_obj;
            exception
               when others then 
                   --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
                   rollback;
                   raise;
            end;

       else

           begin
               update klijenti 
                  set IME = l_klijenti.IME,
                      PREZIME = l_klijenti.PREZIME,
                      EMAIL = l_klijenti.EMAIL,
                      OIB = l_klijenti.OIB,
                      OVLASTI = l_klijenti.OVLASTI, 
                      SPOL = l_klijenti.SPOL
               where
                  ID = l_klijenti.ID;
               commit;    

               l_obj.put('h_message', 'Uspješno ste promijenili klijenta'); 
               l_obj.put('h_errcode', 0);
               out_json := l_obj;
            exception
               when others then 
                   --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
                   rollback;
                   raise;
            end;
       end if;     
    end if;


  exception
     when e_iznimka then
        out_json := l_obj; 
     when others then
        --COMMON.p_errlog('p_save_klijenti',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
        l_obj.put('h_message', 'Dogodila se greška u obradi podataka!'); 
        l_obj.put('h_errcode', 101);
        out_json := l_obj;
  END p_save_klijenti;
  
--save_gledatelje
-----------------------------------------------------------------------------------------
  procedure p_save_gledatelje(in_json in JSON_OBJECT_T, out_json out JSON_OBJECT_T) AS
      l_obj JSON_OBJECT_T;
      l_gledatelji gledatelji%rowtype;
      l_count number;
      l_id number;
      l_string varchar2(1000);
      l_search varchar2(100);
      l_page number; 
      l_perpage number;
      l_action varchar2(10);
  begin

     l_obj := JSON_OBJECT_T(in_json);  
     l_string := in_json.TO_STRING;

     SELECT
        JSON_VALUE(l_string, '$.ID' ),
        JSON_VALUE(l_string, '$.ime'),
        JSON_VALUE(l_string, '$.prezime'),
        JSON_VALUE(l_string, '$.action')
    INTO
        l_gledatelji.ID,
        l_gledatelji.ime,
        l_gledatelji.prezime,
        l_action
    FROM 
       dual; 

    if (nvl(l_action, ' ') = ' ') then
        if (filter.f_check_gledatelje(l_obj, out_json)) then
           raise e_iznimka; 
        end if;  
    end if;

    if (l_gledatelji.ID is null) then
        begin
           insert into gledatelji (ime, prezime) values
             (l_gledatelji.ime, l_gledatelji.prezime);
           commit;

           l_obj.put('h_message', 'Uspješno ste unijeli gledatelja'); 
           l_obj.put('h_errcode', 0);
           out_json := l_obj;

        exception
           when others then 
               --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
               rollback;
               raise;
        end;
    else
       if (nvl(l_action, ' ') = 'delete') then
           begin
               delete gledatelji where ID = l_gledatelji.ID;
               commit;    

               l_obj.put('h_message', 'Uspješno ste obrisali gledatelja'); 
               l_obj.put('h_errcode', 0);
               out_json := l_obj;
            exception
               when others then 
                   --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
                   rollback;
                   raise;
            end;

       else

           begin
               update gledatelji 
                  set ime = l_gledatelji.ime,
                      prezime = l_gledatelji.prezime
               where
                  ID = l_gledatelji.ID;
               commit;    

               l_obj.put('h_message', 'Uspješno ste promijenili gledatelja'); 
               l_obj.put('h_errcode', 0);
               out_json := l_obj;
            exception
               when others then 
                   --COMMON.p_errlog('p_',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
                   rollback;
                   raise;
            end;
       end if;     
    end if;


  exception
     when e_iznimka then
        out_json := l_obj; 
     when others then
        --COMMON.p_errlog('p_save_gledatelje',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
        l_obj.put('h_message', 'Dogodila se greška u obradi podataka!'); 
        l_obj.put('h_errcode', 101);
        out_json := l_obj;
  END p_save_gledatelje;

--save_dvorane
-----------------------------------------------------------------------------------------
  procedure p_save_dvorane(in_json in JSON_OBJECT_T, out_json out JSON_OBJECT_T) AS
      l_obj JSON_OBJECT_T;
      l_dvorane dvorane%rowtype;
      l_count number;
      l_id number;
      l_string varchar2(1000);
      l_search varchar2(100);
      l_page number; 
      l_perpage number;
      l_action varchar2(10);
  begin

     l_obj := JSON_OBJECT_T(in_json);  
     l_string := in_json.TO_STRING;

     SELECT
        JSON_VALUE(l_string, '$.ID' ),
        JSON_VALUE(l_string, '$.oznaka'),
        JSON_VALUE(l_string, '$.brojSjedala'),
        JSON_VALUE(l_string, '$.action')
    INTO
        l_dvorane.ID,
        l_dvorane.oznaka,
        l_dvorane.brojSjedala,
        l_action
    FROM 
       dual; 

    if (nvl(l_action, ' ') = ' ') then
        if (filter.f_check_dvorane(l_obj, out_json)) then
           raise e_iznimka; 
        end if;  
    end if;

    if (l_dvorane.ID is null) then
        begin
           insert into dvorane (oznaka, brojSjedala) values
             (l_dvorane.oznaka, l_dvorane.brojSjedala);
           commit;

           l_obj.put('h_message', 'Uspješno ste unijeli dvoranu'); 
           l_obj.put('h_errcode', 0);
           out_json := l_obj;

        exception
           when others then 
               --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
               rollback;
               raise;
        end;
    else
       if (nvl(l_action, ' ') = 'delete') then
           begin
               delete dvorane where ID = l_dvorane.ID;
               commit;    

               l_obj.put('h_message', 'Uspješno ste obrisali dvoranu'); 
               l_obj.put('h_errcode', 0);
               out_json := l_obj;
            exception
               when others then 
                   --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
                   rollback;
                   raise;
            end;

       else

           begin
               update dvorane 
                  set oznaka = l_dvorane.oznaka,
                      brojSjedala = l_dvorane.brojSjedala
               where
                  ID = l_dvorane.ID;
               commit;    

               l_obj.put('h_message', 'Uspješno ste promijenili dvoranu'); 
               l_obj.put('h_errcode', 0);
               out_json := l_obj;
            exception
               when others then 
                   --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
                   rollback;
                   raise;
            end;
       end if;     
    end if;


  exception
     when e_iznimka then
        out_json := l_obj; 
     when others then
        --COMMON.p_errlog('p_save_dvorane',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
        l_obj.put('h_message', 'Dogodila se greška u obradi podataka!'); 
        l_obj.put('h_errcode', 101);
        out_json := l_obj;
  END p_save_dvorane;

--save_filmove
-----------------------------------------------------------------------------------------
  procedure p_save_filmove(in_json in JSON_OBJECT_T, out_json out JSON_OBJECT_T) AS
      l_obj JSON_OBJECT_T;
      l_filmovi filmovi%rowtype;
      l_count number;
      l_id number;
      l_string varchar2(1000);
      l_search varchar2(100);
      l_page number; 
      l_perpage number;
      l_action varchar2(10);
  begin

     l_obj := JSON_OBJECT_T(in_json);  
     l_string := in_json.TO_STRING;

     SELECT
        JSON_VALUE(l_string, '$.ID' ),
        JSON_VALUE(l_string, '$.naziv'),
        JSON_VALUE(l_string, '$.trajanje'),
        JSON_VALUE(l_string, '$.godinaIzdanja'),
        JSON_VALUE(l_string, '$.redatelj'),
        JSON_VALUE(l_string, '$.action')
    INTO
        l_filmovi.ID,
        l_filmovi.naziv,
        l_filmovi.trajanje,
        l_filmovi.godinaIzdanja,
        l_filmovi.redatelj,
        l_action
    FROM 
       dual; 

    if (nvl(l_action, ' ') = ' ') then
        if (filter.f_check_filmove(l_obj, out_json)) then
           raise e_iznimka; 
        end if;  
    end if;

    if (l_filmovi.ID is null) then
        begin
           insert into filmovi (naziv, trajanje, godinaIzdanja, redatelj) values
             (l_filmovi.naziv, l_filmovi.trajanje, l_filmovi.godinaIzdanja, l_filmovi.redatelj);
           commit;

           l_obj.put('h_message', 'Uspješno ste unijeli film'); 
           l_obj.put('h_errcode', 0);
           out_json := l_obj;

        exception
           when others then 
               --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
               rollback;
               raise;
        end;
    else
       if (nvl(l_action, ' ') = 'delete') then
           begin
               delete filmovi where ID = l_filmovi.ID;
               commit;    

               l_obj.put('h_message', 'Uspješno ste obrisali film'); 
               l_obj.put('h_errcode', 0);
               out_json := l_obj;
            exception
               when others then 
                   --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
                   rollback;
                   raise;
            end;

       else

           begin
               update filmovi 
                  set naziv = l_filmovi.naziv,
                      trajanje = l_filmovi.trajanje,
                      godinaIzdanja = l_filmovi.godinaIzdanja,
                      redatelj = l_filmovi.redatelj
               where
                  ID = l_filmovi.ID;
               commit;    

               l_obj.put('h_message', 'Uspješno ste promijenili film'); 
               l_obj.put('h_errcode', 0);
               out_json := l_obj;
            exception
               when others then 
                   --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
                   rollback;
                   raise;
            end;
       end if;     
    end if;


  exception
     when e_iznimka then
        out_json := l_obj; 
     when others then
        --COMMON.p_errlog('p_save_filmove',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
        l_obj.put('h_message', 'Dogodila se greška u obradi podataka!'); 
        l_obj.put('h_errcode', 101);
        out_json := l_obj;
  END p_save_filmove;

--save_karte
-----------------------------------------------------------------------------------------
  procedure p_save_karte(in_json in JSON_OBJECT_T, out_json out JSON_OBJECT_T) AS
      l_obj JSON_OBJECT_T;
      l_karte karte%rowtype;
      l_count number;
      l_id number;
      l_string varchar2(1000);
      l_search varchar2(100);
      l_page number; 
      l_perpage number;
      l_action varchar2(10);
  begin

     l_obj := JSON_OBJECT_T(in_json);  
     l_string := in_json.TO_STRING;

     SELECT
        JSON_VALUE(l_string, '$.ID' ),
        JSON_VALUE(l_string, '$.gledatelj'),
        JSON_VALUE(l_string, '$.dvorana'),
        JSON_VALUE(l_string, '$.film'),
        JSON_VALUE(l_string, '$.vrijeme'),
        JSON_VALUE(l_string, '$.action')
    INTO
        l_karte.ID,
        l_karte.gledatelj,
        l_karte.dvorana,
        l_karte.film,
        l_karte.vrijeme,
        l_action
    FROM 
       dual; 

    if (nvl(l_action, ' ') = ' ') then
        if (filter.f_check_karte(l_obj, out_json)) then
           raise e_iznimka; 
        end if;  
    end if;

    if (l_karte.ID is null) then
        begin
           insert into karte (gledatelj, dvorana, film, vrijeme) values
             (l_karte.gledatelj, l_karte.dvorana, l_karte.film, l_karte.vrijeme);
           commit;

           l_obj.put('h_message', 'Uspješno ste unijeli karte'); 
           l_obj.put('h_errcode', 0);
           out_json := l_obj;

        exception
           when others then 
               --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
               rollback;
               raise;
        end;
    else
       if (nvl(l_action, ' ') = 'delete') then
           begin
               delete karte where ID = l_karte.ID;
               commit;    

               l_obj.put('h_message', 'Uspješno ste obrisali karte'); 
               l_obj.put('h_errcode', 0);
               out_json := l_obj;
            exception
               when others then 
                   --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
                   rollback;
                   raise;
            end;

       else

           begin
               update karte 
                  set gledatelj = l_karte.gledatelj,
                      dvorana = l_karte.dvorana,
                      film = l_karte.film,
                      vrijeme = l_karte.vrijeme
               where
                  ID = l_karte.ID;
               commit;    

               l_obj.put('h_message', 'Uspješno ste promijenili kartu'); 
               l_obj.put('h_errcode', 0);
               out_json := l_obj;
            exception
               when others then 
                   --COMMON.p_errlog('p_users',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
                   rollback;
                   raise;
            end;
       end if;     
    end if;


  exception
     when e_iznimka then
        out_json := l_obj; 
     when others then
        --COMMON.p_errlog('p_save_karte',dbms_utility.format_error_backtrace,SQLCODE,SQLERRM, l_string);
        l_obj.put('h_message', 'Dogodila se greška u obradi podataka!'); 
        l_obj.put('h_errcode', 101);
        out_json := l_obj;
  END p_save_karte;


END SPREMI;